{"componentChunkName":"component---src-templates-post-js","path":"/myblog-dev-log/making-postlist/","result":{"pageContext":{"markdown":"---\r\ntitle: \"개발 블로그 개발기 - 8. 글 목록 페이지 제작\"\r\ndate: \"2024-02-18\"\r\nauthor: \"bill0077\"\r\n---\r\n\r\n**Demo: https://bill0077.github.io/my-blog  \r\nGit commit: https://github.com/bill0077/my-blog/commit/ab89267c0e932eb1d13fe00d9d4a6c61f78a3102**\r\n\r\n## 글 목록 만들기\r\n현재 프로젝트는 gatsby-node.js에서 각 마크다운 파일을 템플릿 컴포넌트에 적용해 마크다운 파일별로 static page가 개별적으로 생성되어 있다. 고정된 url로 각 페이지를 직접 접속하는 것은 가능항지만 생성된 페이지들을 모아서 확인하고 이동할 수 있는 목록 페이지가 없는 상황이므로, 작성한 글을 카테고리 별로 묶어서 확인할 수 있는 글 목록 페이지를 만들어보자.\r\n\r\n### gatsby-node.js\r\n6번째 글에서 gatsby-node.js의 활용법을 파악하고 static page를 형성했으므로 이번에도 크게 어려운 점은 없었다. 각 글 페이지 별로 static page를 생성해주던 `createPages` 함수에 글 목록 또한 static하게 생성할 수 있도록 추가해주자.\r\n```js\r\n// gatsby-node.js\r\nexports.createPages = ({ actions }) => {\r\n  const { createPage } = actions\r\n  get_post_as_node(\"post-contents\", \"./public/post-contents\").forEach(node => {\r\n    createPage({\r\n      path: `/${node.category}/${node.slug}`,\r\n      component: require.resolve(`./src/templates/Post.js`),\r\n      context: node\r\n    });\r\n  });\r\n\r\n  get_postList_as_node(\"post-contents\", \"./public/post-contents\").forEach(node => {\r\n    createPage({\r\n      path: `/${node.category}`,\r\n      component: require.resolve(`./src/templates/PostList.js`),\r\n      context: node\r\n    });\r\n  });\r\n}\r\n```\r\n\r\n글 목록을 node 형태로 가져오기 위해 /post-contents 폴더 내부의 마크다운 파일들을 dfs해서 각 폴더 별로 마크다운 파일의 목록을 조회하는 `get_postList_as_node` 함수를 간단히 구현해 사용했다. `get_postList_as_node`에서 아래와 같은 데이터를 반환하면 이를 템플릿으로 활용할 페이지에서 각각의 글 목록에 표시할 정보로 활용할 수 있게 된다.\r\n```js\r\nconst postList_as_node = [\r\n  {\r\n    category: \"myblog-dev-log\",\r\n    postList: [\r\n      {\r\n        postTitle: \"title of the post\",\r\n        postDate: \"date of the post\",\r\n        postAuthor: \"author of the post\",\r\n        postExcerpt: \"excerpt of the post\",\r\n        postLink: \"link to the post\"\r\n      },\r\n      {\r\n        postTitle: \"title of the post2\",\r\n        postDate: \"date of the post2\",\r\n        postAuthor: \"author of the post2\",\r\n        postExcerpt: \"excerpt of the post2\",\r\n        postLink: \"link to the post2\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    category: \"etc\",\r\n    postList: [\r\n      {\r\n        postTitle: \"etc post\",\r\n        postDate: \"today\",\r\n        postAuthor: \"me\",\r\n        postExcerpt: \"foo\",\r\n        postLink: \"http://bar\"\r\n      }\r\n    ]\r\n  },\r\n\r\n]\r\n```\r\n\r\n/templates의 PostList 컴포넌트를 템플릿으로 활용해 카테고리별로 글목록 페이지마다 글 목록을 pageContext로 넘겨주면 PostList에서는 각 글마다 제목, 작성자, 날짜 등을 보여주는 컴포넌트를 생성해 목록으로 보여주게 된다 (get_postList_as_node 함수에서 마크다운 파일들을 읽어 frontmatter를 해석하고, 해석된 정보를 context로 넘겨준다. 이때 간략하게 yaml frontmatter을 해석하고 활용하기 위해 추가적인 함수를 구현해 사용했다).\r\n```js\r\n// PostList.js\r\nimport React from 'react';\r\nimport { Link } from \"gatsby\";\r\n\r\nimport Navigator from \"../components/Navigator\"\r\n\r\nimport * as styles from \"../styles/PostList.module.css\";\r\n\r\n/** Template component for post list.\r\n    Use 'pageContext' to fetch the list of postings. */\r\nexport default function PostList({ pageContext }) {\r\n  return (\r\n    <div className={styles[\"postList\"]}>\r\n      <Navigator />\r\n      <div className={styles[\"postList__category\"]}>{pageContext.category}</div>\r\n      <div className={styles[\"postList__content\"]}>\r\n        {pageContext.postList.map((post) => (\r\n          <div className={styles[\"postList__content__post\"]}>\r\n            <Link className={styles[\"postList__content__post__title\"]} to={`${process.env.GATSBY_PUBLIC_URL}/${post.postLink}`}>{post.postTitle}</Link>\r\n            <div className={styles[\"postList__content__post__excerpt\"]}>{post.postExcerpt}</div>\r\n            <div className={styles[\"postList__content__post__date\"]}>{`date: ${post.postDate}`}</div>\r\n            <div className={styles[\"postList__content__post__author\"]}>{`written by ${post.postAuthor}`}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n### 결과물\r\n완성된 글 목록 페이지는 아래와 같은 모습을 하고 있다.\r\n<center>\r\n<img src=\"___MEDIA_FILE_PATH___/postlist_img.png\" width=\"100%\" title=\"postlist-page\"/>\r\n</center>\r\n\r\n<br>\r\n<br>\r\n\r\n**P.S.** yaml frontmatter 해석이 가능한 `get_yaml_frontmatter`의 코드이다. 간단히 마크다운 텍스트를 입력으로 받고 frontmatter 부분을 찾은 후 `js-yaml` 모듈을 사용해 yaml로 번역한다. `js-yaml`은 아래처럼 설치가 가능하다.\r\n```cmd\r\nnpm install js-yaml\r\n```\r\n```js\r\n/** Simple function to get YAML frontmatter markdown.\r\n    Return parsed object when success.\r\n    Return undefined when there is no frontmatter or parsing is failed. */\r\nvar get_yaml_frontmatter = function(markdown) {\r\n  markdown = markdown.trim();\r\n  if (!markdown.startsWith('---') || !markdown.indexOf('---', 3)) { // check if markdown has frontmatter\r\n    return;\r\n  }\r\n\r\n  const yaml = require('js-yaml');\r\n  try {\r\n    const frontmatterString = markdown.slice(3, markdown.indexOf('---', 3)).trim();\r\n    const frontmatter = yaml.load(frontmatterString);\r\n    return frontmatter;\r\n  } catch (error) {\r\n    return;\r\n  }\r\n}\r\n```\r\n\r\n## reference\r\n\r\nnpm, js-yaml, https://www.npmjs.com/package/js-yaml","postTitle":"개발 블로그 개발기 - 8. 글 목록 페이지 제작","postDate":"2024-02-18","postAuthor":"bill0077","category":"myblog-dev-log","slug":"making-postlist","filePath":"post-contents/myblog-dev-log/making-postlist.md","mediaPath":"post-contents/myblog-dev-log/media"}},"staticQueryHashes":[],"slicesMap":{}}